#!/usr/bin/env bash

# Set install directory based on environment
if [[ -n "$PREFIX" ]] && command -v pkg &>/dev/null; then
	INSTALL_DIR="$PREFIX/bin" # Termux uses $PREFIX/bin
else
	INSTALL_DIR="/usr/local/bin"
fi

# Check for required commands
if ! command -v python3 &>/dev/null; then
	echo "Error: python3 is not installed. Please install it to continue."
	exit 1
fi

# Ensure the script is run from the project root
if [[ ! -f "cli.py" || ! -f "call.sh" ]]; then
	echo "Error: Please run this script from the root of the cc-groq-proxy directory."
	exit 1
fi

# Get the absolute path of the project directory
PROJECT_DIR="$(pwd)"
TARGET_COMMAND="ccg"
TARGET_PATH="$INSTALL_DIR/$TARGET_COMMAND"

echo "Installing '$TARGET_COMMAND' to $INSTALL_DIR..."

# Check if install directory exists
if [[ ! -d "$INSTALL_DIR" ]]; then
	echo "Error: Installation directory '$INSTALL_DIR' does not exist."
	echo "You may need to create it or run this script with sudo."
	exit 1
fi

# Create the command script from an inline template (here document)
read -r -d '' CMD_SCRIPT <<'EOF'
#!/usr/bin/env bash

# This script is generated by install.sh. Do not edit manually.

# The directory where cc-groq-proxy was installed
CC_GROQ_PROXY_DIR="__INSTALL_DIR_PLACEHOLDER__"

if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    echo "ccg - Command wrapper for cc-groq-proxy"
    echo "Usage: ccg [OPTION] [ARGS...]"
    echo "  -h, --help  Show this help"
    echo "  -p, --path  Print the project directory path (use with 'cd \$(ccg -p)')"
    echo "  -c, --cli   Run a command with cli.py (e.g., ccg -c --build)"
    echo "  (no args)   Run the proxy using call.sh"
    exit 0
fi

if [[ ! -d "$CC_GROQ_PROXY_DIR" ]]; then
    echo "Error: Installation directory '$CC_GROQ_PROXY_DIR' not found."
    echo "Please consider reinstalling."
    exit 1
fi

case "$1" in
    -p|--path)
        echo "$CC_GROQ_PROXY_DIR"
        ;;
    -c|--cli)
        shift
        python3 "$CC_GROQ_PROXY_DIR/cli.py" "$@"
        ;;
    *)
        bash "$CC_GROQ_PROXY_DIR/call.sh" "$@"
        ;;
esac
EOF

# Replace the placeholder with the actual project directory
# Using a different delimiter for sed to handle paths with slashes
CONFIGURED_SCRIPT=$(echo "$CMD_SCRIPT" | sed "s|__INSTALL_DIR_PLACEHOLDER__|${PROJECT_DIR}|g")

# Write the configured script to the target directory
# Use a temporary file to handle potential permission issues with sudo
TMP_FILE=$(mktemp)
echo "$CONFIGURED_SCRIPT" >"$TMP_FILE"
chmod +x "$TMP_FILE"

# Move the file using sudo if the directory is not writable
if [[ ! -w "$INSTALL_DIR" ]]; then
	echo "Administrator privileges are required to write to $INSTALL_DIR."
	sudo mv "$TMP_FILE" "$TARGET_PATH"
else
	mv "$TMP_FILE" "$TARGET_PATH"
fi

# Check if the move was successful
if [[ $? -ne 0 ]]; then
	echo "Error: Failed to install the script. Please check permissions."
	# Clean up the temp file if it still exists
	[ -f "$TMP_FILE" ] && rm "$TMP_FILE"
	exit 1
fi

echo "Installation completed successfully!"
echo "You can now use the '$TARGET_COMMAND' command anywhere."
echo "Run 'ccg --help' for usage instructions."
